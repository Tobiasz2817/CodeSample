using System;
using UnityEngine;
using UnityEngine.InputSystem;

namespace Inflowis {
    //TODO: Input Generated by Source Generator
    public static class GameInput {
        public static event Action<Vector2> OnMove;
        public static event Action OnJump;
        public static event Action OnCutJump;
        public static event Action OnDash;
        public static event Action OnAttack;
        public static event Action OnRoll;
        public static event Action OnLoadStrongAttack;
        public static event Action OnBreakStrongAttack;
        public static event Action OnSkill1;
        public static event Action OnSkill2;
        public static event Action OnSkill3;
        public static event Action OnSkill4;
        public static event Action OnParry;
        public static event Action OnBreakParry;
        
        internal static void Initialize(InputActionMap map) {
            map["Move"].performed += context => {
                OnMove?.Invoke(context.ReadValue<Vector2>());
            };
            map["Move"].canceled += context => {
                OnMove?.Invoke(context.ReadValue<Vector2>());
            };

            map["Jump"].performed += _ => {
                OnJump?.Invoke();
            };
            map["Jump"].canceled += _ => {
                OnCutJump?.Invoke();
            };
            
            map["Dash"].performed += _ => {
                OnDash?.Invoke();
            };

            map["Roll"].performed += _ => {
                OnRoll?.Invoke();
            };

            map["Attack"].performed += _ => {
                OnAttack?.Invoke();
            };
            
            map["StrongAttack"].performed += _ => {
                OnLoadStrongAttack?.Invoke();
            };
            map["StrongAttack"].canceled += _ => {
                OnBreakStrongAttack?.Invoke();
            };

            map["Skill1"].performed += _ => {
                OnSkill1?.Invoke();
            };
            map["Skill2"].performed += _ => {
                OnSkill2?.Invoke();
            };
            map["Skill3"].performed += _ => {
                OnSkill3?.Invoke();
            };
            map["Skill4"].performed += _ => {
                OnSkill4?.Invoke();
            };
        }
    }
    
    public static class UIInput {
        public static event Action OnEscapePressed;
        internal static void Initialize(InputActionMap map) {
            map["Escape"].performed += _ => {
                OnEscapePressed?.Invoke();
            };
        }
    }
}